!(function (t) {
  let e = {
    siteUrl:
      (window._spPageContextInfo && _spPageContextInfo.webAbsoluteUrl) || "",
    setSiteUrl(t) {
      this.siteUrl =
        t || (window._spPageContextInfo && _spPageContextInfo.webAbsoluteUrl);
    },
    getDigest: async () => document.getElementById("__REQUESTDIGEST")?.value,
    async getListMeta(t) {
      let e = await fetch(
          `${this.siteUrl}/_api/web/lists/GetByTitle('${encodeURIComponent(
            t
          )}')?$select=ListItemEntityTypeFullName`,
          { headers: { Accept: "application/json;odata=verbose" } }
        ),
        a = await e.json();
      return a.d.ListItemEntityTypeFullName;
    },
    async createItem(t, e) {
      let a = await this.getListMeta(t),
        i = await this.getDigest(),
        s = await fetch(
          `${this.siteUrl}/_api/web/lists/GetByTitle('${encodeURIComponent(
            t
          )}')/items`,
          {
            method: "POST",
            headers: {
              Accept: "application/json;odata=verbose",
              "Content-Type": "application/json;odata=verbose",
              "X-RequestDigest": i,
            },
            body: JSON.stringify({ __metadata: { type: a }, ...e }),
          }
        );
      if (!s.ok) throw Error(`Create failed: ${await s.text()}`);
      return s.json();
    },
    async getItems(t, e = "", a = 4999) {
      let i = `${this.siteUrl}/_api/web/lists/GetByTitle('${encodeURIComponent(
        t
      )}')/items?$top=${a}`;
      e && (i += `&$filter=${encodeURIComponent(e)}`);
      let s = await fetch(i, {
        headers: { Accept: "application/json;odata=verbose" },
      });
      if (!s.ok) throw Error(`Get failed: ${await s.text()}`);
      return (await s.json()).d.results;
    },
    async updateItem(t, e, a) {
      let i = await this.getListMeta(t),
        s = await this.getDigest(),
        o = await fetch(
          `${this.siteUrl}/_api/web/lists/GetByTitle('${encodeURIComponent(
            t
          )}')/items(${e})`,
          {
            method: "POST",
            headers: {
              Accept: "application/json;odata=verbose",
              "Content-Type": "application/json;odata=verbose",
              "X-RequestDigest": s,
              "X-HTTP-Method": "MERGE",
              "IF-MATCH": "*",
            },
            body: JSON.stringify({ __metadata: { type: i }, ...a }),
          }
        );
      if (!o.ok) throw Error(`Update failed: ${await o.text()}`);
    },
    async deleteItem(t, e) {
      let a = await this.getDigest(),
        i = await fetch(
          `${this.siteUrl}/_api/web/lists/GetByTitle('${encodeURIComponent(
            t
          )}')/items(${e})`,
          {
            method: "POST",
            headers: {
              Accept: "application/json;odata=verbose",
              "X-RequestDigest": a,
              "IF-MATCH": "*",
              "X-HTTP-Method": "DELETE",
            },
          }
        );
      if (!i.ok) throw Error(`Delete failed: ${await i.text()}`);
    },
    async uploadFileToLibrary(t, e, a = "") {
      let i = await this.getDigest(),
        s = `${this.siteUrl.replace(location.origin, "")}/${t}/${a}`.replace(
          /\/+$/,
          ""
        ),
        o = `${
          this.siteUrl
        }/_api/web/GetFolderByServerRelativeUrl('${s}')/Files/add(url='${encodeURIComponent(
          e.name
        )}',overwrite=true)`,
        l = await fetch(o, {
          method: "POST",
          headers: {
            Accept: "application/json;odata=verbose",
            "X-RequestDigest": i,
          },
          body: e,
        });
      if (!l.ok) throw Error(`Upload failed: ${await l.text()}`);
      return l.json();
    },
    async createFolder(t, e) {
      let a = await this.getDigest(),
        i = `${this.siteUrl.replace(location.origin, "")}/${t}/${e}`.replace(
          /\/+$/,
          ""
        ),
        s = await fetch(`${this.siteUrl}/_api/web/folders`, {
          method: "POST",
          headers: {
            Accept: "application/json;odata=verbose",
            "Content-Type": "application/json;odata=verbose",
            "X-RequestDigest": a,
          },
          body: JSON.stringify({
            __metadata: { type: "SP.Folder" },
            ServerRelativeUrl: i,
          }),
        });
      if (!s.ok) throw Error(`Folder creation failed: ${await s.text()}`);
      return s.json();
    },
  };
  t.SPUtils = e;
})(window);
